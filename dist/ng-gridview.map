{"version":3,"file":"ng-gridview.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 0a33c7a873a4fc3d5a16","webpack:///src/gridview.ts","webpack:///./src/gridview.html"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 0a33c7a873a4fc3d5a16\n **/","const DATA_LIST: string = 'list';\nconst ROW_HEIGHT: string = 'rowHeight';\nconst COLUMN_COUNT: string = 'columnCount';\nconst SCOPE_KEY: string = '$$transcludeScope';\nconst CELL_CLASS: string = 'grid-cell';\nconst VIEW_INDEX: string = 'viewIndex';\n\n/**\n * keep the reference of child view detached from GridView.\n * when volume limit is exceed, remove the farthest view from current center position\n * when retrieve a recycled view, id and position is needed.\n */\nexport class Recycler {\n\n    recycledViewMap: Map<number, Element> = new Map<number, Element>();\n\n    maxRecycledCount = 10;\n\n    private cleanup(view: Element): void {\n        let transcludedScope = view[SCOPE_KEY];\n        transcludedScope.$destroy();\n    }\n\n    recycleView(position: number, view: Element): void {\n        this.recycledViewMap.set(position, view);\n    }\n\n    getView(position: number): Element {\n        let recycledView = this.recycledViewMap.get(position);\n        if(recycledView && recycledView[SCOPE_KEY]) {\n            this.recycledViewMap.delete(position);\n            return recycledView;\n        } else {\n            return null;\n        }\n    }\n\n    clean(): void {\n        if(this.recycledViewMap.size > this.maxRecycledCount) {\n            let positions = Array.from(this.recycledViewMap.keys());\n            let sortedPosition = positions.sort((n1: number, n2:number): any => {\n                return n1 - n2;\n            });\n            let deleteCount = this.recycledViewMap.size - this.maxRecycledCount;\n            for(let i = 0; i < deleteCount; i++) {\n                this.cleanup(this.recycledViewMap.get(sortedPosition[i]));\n                this.recycledViewMap.delete(sortedPosition[i]);\n            }\n        }\n    }\n\n    empty(): void {\n        let next, iter = this.recycledViewMap.values();\n        while((next = iter.next().value)) {\n            this.cleanup(next);\n        }\n        this.recycledViewMap.clear();\n    }\n}\n\nexport class GridView {\n\n    static $inject = ['$scope', '$element', '$transclude'];\n\n    private hostWidth: number;\n    private hostHeight: number;\n    /**\n     * horizontal and vertical gutter between grid cell\n     */\n    private horizontalGutter: number;\n    private verticalGutter: number;\n\n    private rowHeight: number;\n    private columnWidth: number;\n    private columnCount: number;\n\n    private scrollBarWidth: number = 17;\n    \n    private firstChildPosition: number = 0;\n    \n    private scrollLayer: HTMLElement;\n    private childrenHolder: HTMLElement;\n\n    private recycleViewStash: Element[] = [];\n\n    isPerformingLayout: boolean = false;\n\n    hostElement: HTMLElement;\n\n    private recycler: Recycler = new Recycler();\n\n    constructor(\n        private $scope: ng.IScope,\n        private $element: ng.IAugmentedJQuery,\n        private $transclude: ng.ITranscludeFunction\n    ) {\n        this.hostElement = <HTMLElement> this.$element[0].querySelector('.gridview-wrapper');\n        this.scrollLayer = <HTMLElement> this.hostElement.querySelector('.scroll-layer');\n        this.childrenHolder = <HTMLElement> this.hostElement.querySelector('.children-holder');\n    }\n\n    private applyTransform(view: HTMLElement, x: number, y: number) {\n        view.style.transform = `translate(${x}px, ${y}px)`;\n        view.style.webkitTransform = `translate(${x}px, ${y}px)`;\n    }\n    \n    protected dispatchLayout(view: HTMLElement, addBefore: boolean): void {\n        let viewIndex = view[VIEW_INDEX];\n        \n        let rowIndex = Math.floor(viewIndex / this.columnCount);\n        let startPosY = rowIndex * (this.rowHeight + this.verticalGutter);\n        let startPosX = (viewIndex - (rowIndex * this.columnCount)) * (this.columnWidth + this.horizontalGutter);\n        \n        this.applyTransform(view, startPosX, startPosY);\n        view.style.width = this.columnWidth + 'px';\n        view.style.height = this.rowHeight + 'px';\n        view.style.position = 'absolute';\n        \n        if(addBefore) {\n            this.childrenHolder.insertBefore(view, this.childrenHolder.firstChild);\n        } else {\n            this.childrenHolder.appendChild(view);\n        }\n    \n    }\n    \n    private getDataList(): any[] {\n        return <any[]> this.$scope[DATA_LIST];\n    }\n    \n    private getView(position: number): Element {\n        let dataList = this.getDataList();\n        let view: Element;\n        this.$transclude((clone: ng.IAugmentedJQuery, scope: ng.IScope) => {\n            scope['$data'] = dataList[position];\n            for(let i = 0; i < clone.length; i++) {\n                if(clone[i].classList && clone[i].classList.contains(CELL_CLASS)) {\n                    view = clone[i];\n                    break;\n                }\n            }\n            view[SCOPE_KEY] = scope;\n            view[VIEW_INDEX] = position;\n        });\n        return view;\n    }\n\n    private insertView(startIndex: number, endIndex: number): void {\n        let dataList = this.getDataList();\n        let firstChild = this.childrenHolder.firstChild, lastChild = this.childrenHolder.lastChild;\n        if(firstChild && lastChild) {\n            for(let i = firstChild[VIEW_INDEX] - 1; i >= startIndex; i--) {\n                let view = this.recycler.getView(i);\n                if(!view) {\n                    view = this.getView(i);\n                }\n                this.dispatchLayout(<HTMLElement> view, true);\n            }\n            for(let i = lastChild[VIEW_INDEX] + 1; i <= endIndex; i++) {\n                let view = this.recycler.getView(i);\n                if(!view) {\n                    view = this.getView(i);\n                }\n                this.dispatchLayout(<HTMLElement> view, false);\n            }  \n        } else {\n            for(let i = startIndex; i <= endIndex; i++) {\n                let view = this.recycler.getView(i);\n                if(!view) {\n                    view = this.getView(i);\n                }\n                this.dispatchLayout(<HTMLElement> view, false);\n            }\n        }\n    }\n\n    private findCurrentIndexRange(): {startIndex: number, endIndex: number} {\n        let currentScrollTop = this.hostElement.scrollTop;\n        let startRow = Math.floor(currentScrollTop / (this.rowHeight + this.verticalGutter));\n        let startRowOffset = currentScrollTop - startRow * (this.rowHeight + this.verticalGutter)\n        let endRow = Math.ceil((this.hostHeight + this.verticalGutter + startRowOffset) / (this.rowHeight + this.verticalGutter)) + startRow;\n        let dataList = this.getDataList();\n        return {\n            startIndex: startRow * this.columnCount,\n            endIndex: Math.min(endRow * this.columnCount - 1, dataList.length - 1)\n        };\n    }\n\n    protected layoutChildren(): void {\n        let {startIndex, endIndex} = this.findCurrentIndexRange();\n        let childrenViews = this.childrenHolder.children;\n        for(let i = 0; i < childrenViews.length; i++) {\n            let childView = childrenViews[i];\n            if(childView[VIEW_INDEX] < startIndex || childView[VIEW_INDEX] > endIndex) {\n                this.childrenHolder.removeChild(childView);\n                this.recycler.recycleView(childView[VIEW_INDEX], childView);\n                i--;\n            }\n        }\n        this.insertView(startIndex, endIndex);\n    }\n\n    layout(): void {\n        if(this.isPerformingLayout) {\n            return;\n        }\n        this.isPerformingLayout = true;\n        // temporary detch children holder from DOM tree\n        this.scrollLayer.removeChild(this.childrenHolder);\n\n        this.layoutChildren();\n\n        // attach back the children holder        \n        this.scrollLayer.appendChild(this.childrenHolder);\n\n        this.recycler.clean();\n        this.isPerformingLayout = false;\n    }\n\n    clearLayout() {\n        this.recycler.empty();\n        let lastChild;\n        while((lastChild = this.childrenHolder.lastChild)) {\n            this.childrenHolder.removeChild(lastChild);\n        }\n    }\n\n    measure(horizontalGutter: number, verticalGutter: number): void {\n        this.clearLayout();\n        this.horizontalGutter = horizontalGutter;\n        this.verticalGutter = verticalGutter;\n        \n        this.hostWidth = this.hostElement.clientWidth;\n        this.hostHeight = this.hostElement.clientHeight;\n        \n        this.columnCount = this.$scope[COLUMN_COUNT];\n        this.rowHeight = this.$scope[ROW_HEIGHT];\n        this.columnWidth = (this.hostWidth - this.scrollBarWidth) / this.columnCount - this.horizontalGutter * (this.columnCount - 1);\n        let dataList = this.getDataList();\n        \n        let dataCount = dataList.length;\n        let holderHeight = Math.ceil(dataCount / this.columnCount) * (this.rowHeight + this.verticalGutter) - this.verticalGutter;\n        this.scrollLayer.style.height = holderHeight + 'px';\n        this.childrenHolder.style.height = holderHeight + 'px';\n    }\n\n}\n\nexport const ngGridView = angular.module('ngFancy.GridView', [])\n    .directive('ngGridview', ['$timeout', ($timeout) => {\n        return {\n            restrict: 'E',\n            template: require('./gridview.html'),\n            scope: {\n                list: '=',\n                rowHeight: '=',\n                columnCount: '=',\n                horizontalGutter: '=?',\n                verticalGutter: '=?'\n            },\n            controller: GridView,\n            controllerAs: '$ctrl',\n            transclude: true,\n            require: 'ngGridview',\n            link: (scope: ng.IScope, element: ng.IAugmentedJQuery, attr: any, ctrl: GridView) => {\n                let hGutter = scope['horizontalGutter'] || 10;\n                let vGutter = scope['verticalGutter'] || 10;\n                scope.$watchCollection('list', (newValue) => {\n                    if(newValue) {\n                        ctrl.measure(hGutter, vGutter);\n                        ctrl.layout()\n                    }\n                });\n\n                let gridviewWrapper = element[0].querySelector('.gridview-wrapper');\n\n                let deterDigest = null;\n                let scrollListener = () => {\n                    if(ctrl.isPerformingLayout) {\n                        clearTimeout(deterDigest);\n                        deterDigest = setTimeout(() => {\n                            scope.$apply();\n                        });\n                    } else {\n                        ctrl.layout();\n                        scope.$apply();\n                    }\n                };\n                gridviewWrapper.addEventListener('scroll', scrollListener, false);\n\n                scope.$on('$destory', ()=> {\n                    gridviewWrapper.removeEventListener('scroll', scrollListener);\n                });\n\n            }\n        };\n    }])\n    .name;\n\n\n/** WEBPACK FOOTER **\n ** src/gridview.ts\n **/","module.exports = \"<div class=\\\"gridview-wrapper\\\">\\n    <div class=\\\"scroll-layer\\\">\\n        <div class=\\\"children-holder\\\"></div>\\n    </div>\\n</div>\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/gridview.html\n ** module id = 1\n ** module chunks = 0\n **/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAAA;AAEA;AAEA;AA0CA;AAxCA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA9CA;AAgDA;AA+BA;AACA;AACA;AACA;AAltLA;AAwLA;AAAA;AA1LA;AA4LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;ACzSA;;;;;","sourceRoot":""}